A member of a class or trait is abstract if the member does not have a complete definition in the class. Abstract members
are intended to be implemented in subclasses of the class in which they are declared.

 --- TYPE MEMBERS
The term abstract type in Scala means a type declared (with the "type" keyword) to be a member of a class or trait,
without specifying a definition.
Classes themselves may be abstract, and traits are by definition abstract, but neither of these are what are referred
to as abstract types in Scala. An abstract type in Scala is always a member of some class or trait,
such as type T in trait Abstract.

One reason to use a type member is to define a short, descriptive alias for a type whose real name is more verbose, or
less obvious in meaning, than the alias. Such type members can help clarify the code of a class or trait. The other
main use of type members is to declare abstract types that must be defined in subclasses. This use, which was demonstrated
in the previous section, will be described in detail later in this chapter