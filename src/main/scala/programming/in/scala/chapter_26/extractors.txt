By now you have probably grown accustomed to the concise way data can be decomposed and analyzed using pattern matching.
This chapter shows you how to generalize this concept further. Until now, constructor patterns were linked to case classes.
For instance, Some(x) is a valid pattern because Some is a case class. Sometimes you might wish that you could write
patterns like this without creating an associated case class. In fact, you might wish to be able to create your own kinds
of patterns. Extractors give you a way to do so.

//------------------------------------------------------------------------------------------------------------------------
To illustrate the problem extractors solve, imagine that you need to analyze strings that represent email addresses.
Given a string, you want to decide whether it is an email address or not, and, if it is, you want to access the user
and domain parts of the address. The traditional way to do this uses three helper functions:

  def isEMail(s: String): Boolean
  def domain(s: String): String
  def user(s: String): String

With these functions, you could parse a given string s as follows:

  if (isEMail(s)) println(user(s) + " AT " + domain(s))
  else println("not an email address")

This works, but is kind of clumsy. What's more, things would become more complicated if you combined several such tests.
For instance you might want to find two successive strings in a list that are both email addresses with the same user.
You can try this yourself with the access functions defined previously to see what would be involved.

Pattern matching is ideal for attacking problems like this. Let's assume for the moment that you could match a string
with a pattern:
  EMail(user, domain)
The pattern would match if the string contained an embedded at sign (@). In that case it would bind variable user to
the part of the string before the @ and variable domain to the part after it. Postulating a pattern like this, the
previous expression could be written more clearly like this:

  s match {
    case EMail(user, domain) => println(user + " AT " + domain)
    case _ => println("not an email address")
  }

The more complicated problem of finding two successive email addresses with the same user part would translate
to the following pattern:

  ss match {
    case EMail(u1, d1) :: EMail(u2, d2) :: _ if (u1 == u2) => ...
    ...
  }

This is much more legible than anything that could be written with access functions. However, the problem is that strings
are not case classes; they do not have a representation that conforms to EMail(user, domain). This is where Scala's
extractors come in: they let you define new patterns for pre-existing types, where the pattern need not follow the
internal representation of the type.

EXTRACTORS AND SEQUENCE PATTERNS

  List()
  List(x, y, _*)
  Array(x, 0, 0, _)

In fact, these sequence patterns are all implemented using extractors in the standard Scala library. For instance,
patterns of the form List(...) are possible because the scala.List companion object is an extractor that defines an
unapplySeq method. Listing 26.6 shows the relevant definitions:

    package scala
    object List {
      def apply[T](elems: T*) = elems.toList
      def unapplySeq[T](x: List[T]): Option[Seq[T]] = Some(x)
      ...
    }
    An extractor that defines an unapplySeq method.

The List object contains an apply method that takes a variable number of arguments. That's what lets
you write expressions such as:

  List()
  List(1, 2, 3)

It also contains an unapplySeq method that returns all elements of the list as a sequence. That's what supports List(...)
patterns. Very similar definitions exist in the object scala.Array. These support analogous injections and
extractions for arrays.