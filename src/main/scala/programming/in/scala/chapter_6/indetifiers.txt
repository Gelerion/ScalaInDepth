An operator identifier consists of one or more operator characters. Operator characters are printable ASCII characters
such as +, :, ?, ~ or #. Here are some examples of operator identifiers:

+    ++    :::    <?>    :->

The Scala compiler will internally "mangle" operator identifiers to turn them into legal Java identifiers with embedded
$ characters. For instance, the identifier :-> would be represented internally as $colon$minus$greater. If you ever
wanted to access this identifier from Java code, you'd need to use this internal representation.

Because operator identifiers in Scala can become arbitrarily long, there is a small difference between Java and Scala.
In Java, the input x<-y would be parsed as four lexical symbols, so it would be equivalent to x < - y. In Scala,
<- would be parsed as a single identifier, giving x <- y. If you want the first interpretation, you need to separate
the < and the - characters by a space. This is unlikely to be a problem in practice, as very few people would write
x<-y in Java without inserting spaces or parentheses between the operators.

A mixed identifier consists of an alphanumeric identifier, which is followed by an underscore and an operator identifier.
For example, unary_+ used as a method name defines a unary + operator. Or, myvar_= used as method name defines an
assignment operator. In addition, the mixed identifier form myvar_= is generated by the Scala compiler to support
properties.

A literal identifier is an arbitrary string enclosed in back ticks (` ...`). Some examples of literal identifiers are:

`x`    `<clinit>`    `yield`

The idea is that you can put any string that's accepted by the runtime as an identifier between back ticks.
The result is always a Scala identifier. This works even if the name contained in the back ticks would be a Scala
reserved word. A typical use case is accessing the static yield method in Java's Thread class. You cannot write
Thread.yield() because yield is a reserved word in Scala. However, you can still name the method in back ticks, e.g.,
Thread.`yield`().